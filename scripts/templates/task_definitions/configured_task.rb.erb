# frozen_string_literal: true

# Generated by Tasker Demo Application Builder
# Task: <%= task_name %>
# Namespace: <%= namespace %>
# Generated at: <%= Time.now.strftime("%Y%m%dT%H%M%S%z") %>
#
# This task uses the YAML-driven ConfiguredTask pattern.
# Configuration is defined in config/tasker/tasks/<%= task_name %>.yaml

module <%= namespace.classify %>
  class <%= task_name.classify %> < Tasker::ConfiguredTask
    # Configuration is loaded from YAML file automatically
    # All step templates, dependencies, and handler configurations
    # are defined in config/tasker/tasks/<%= task_name %>.yaml

    <% if has_annotations %>
    # Update annotations after task completion
    # This demonstrates how to add custom annotations to completed tasks
    def update_annotations(task, _sequence, steps)
      annotatable_steps = steps.filter { |step| step.status == Tasker::Constants::WorkflowStepStatuses::COMPLETE }
      annotation_type = Tasker::AnnotationType.find_or_create_by!(name: '<%= annotation_type_name %>')

      annotatable_steps.each do |step|
        log_structured(
          :info,
          "Creating annotation for completed step",
          correlation_id: task.task_id,
          step_name: step.name,
          annotation_type: '<%= annotation_type_name %>'
        )

        Tasker::TaskAnnotation.create(
          task: task,
          task_id: task.task_id,
          annotation_type_id: annotation_type.annotation_type_id,
          annotation_type: annotation_type,
          annotation: {
            task_name: '<%= task_name %>',
            step_name: step.name,
            namespace: '<%= namespace %>',
            completed_at: step.updated_at.iso8601,
            step_results: step.results,
            business_metrics: extract_business_metrics(step)
          }
        )
      end
    end

    private

    def extract_business_metrics(step)
      # Extract business-relevant metrics from step results for analytics
      case step.name
        <% steps.each do |step| %>
      when '<%= step[:name] %>'
        extract_<%= step[:name] %>_metrics(step.results)
        <% end %>
      else
        { processed_at: Time.now.strftime("%Y%m%dT%H%M%S%z") }
      end
    end

    <% steps.each do |step| %>
    def extract_<%= step[:name] %>_metrics(results)
      return {} unless results.is_a?(Hash)

      <%= case step[:step_type]
          when 'cart_validation'
            %q({
              products_count: results['products']&.length || 0,
              total_quantity: results['total_quantity'] || 0,
              user_id: results['user_id']
            })
          when 'product_lookup'
            %q({
              availability_status: results['availability'],
              stock_level: results['stock'],
              price: results['price']
            })
          when 'calculation'
            %q({
              final_total: results['final_total'],
              discount_applied: results['discount_amount'] || 0,
              tax_amount: results['tax_amount'] || 0
            })
          when 'order_creation'
            %q({
              order_id: results['order_id'],
              order_status: results['status'],
              total_amount: results['total_amount']
            })
          when 'analysis'
            %q({
              low_stock_count: results['low_stock_count'] || 0,
              products_analyzed: results['total_products_analyzed'] || 0
            })
          else
            %Q({
              step_type: '#{step[:step_type]}',
              has_data: results.present?
            })
          end %>
    end

    <% end %>
    <% end %>
  end
end
