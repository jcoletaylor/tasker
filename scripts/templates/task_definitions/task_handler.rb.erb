# frozen_string_literal: true

# Generated by Tasker Demo Application Builder
# Task: <%= task_name %>
# Namespace: <%= namespace %>
# Generated at: <%= Time.now.strftime("%Y%m%dT%H%M%S%z") %>

module <%= namespace.classify %>
  class <%= task_name.classify %>Task
    include Tasker::TaskHandler

    # Register with HandlerFactory using namespace
    register_handler('<%= task_name %>', namespace: '<%= namespace %>')

    # Define step templates for this task
    define_step_templates do |templates|
      <% steps.each do |step| -%>
      templates.define(
        dependent_system: '<%= namespace %>',
        name: '<%= step[:name] %>',
        description: '<%= step[:description] %>',
        <% if step[:depends_on_step] -%>
        depends_on_step: '<%= step[:depends_on_step] %>',
        <% end -%>
        handler_class: <%= namespace.classify %>::StepHandlers::<%= step[:name].classify %>StepHandler,
        <% if step[:api_endpoint] -%>
        handler_config: Tasker::StepHandler::Api::Config.new(
          url: '<%= step[:api_endpoint] %>',
          params: <%= step[:api_params] || '{}' %>,
          headers: {
            'Content-Type' => 'application/json',
            'Accept' => 'application/json'
          },
          enable_exponential_backoff: true,
          retry_delay: <%= step[:retry_delay] || 1.0 %>
        ),
        <% end -%>
        default_retryable: <%= step[:retryable] != false %>,
        default_retry_limit: <%= step[:retry_limit] || 3 %>
      )

      <% end -%>
    end

    # JSON schema for task context validation
    def schema
      @schema ||= {
        type: :object,
        required: <%= required_context_fields.inspect %>,
        properties: {
          <% context_schema.each do |field, config| -%>
          <%= field %>: <%= config.inspect %>,
          <% end -%>
        }
      }
    end

    <% if has_annotations -%>
    # Update annotations after task completion
    def update_annotations(task, _sequence, steps)
      annotatable_steps = steps.filter { |step| step.status == Tasker::Constants::WorkflowStepStatuses::COMPLETE }
      annotation_type = Tasker::AnnotationType.find_or_create_by!(name: '<%= annotation_type_name %>')

      annotatable_steps.each do |step|
        Tasker::TaskAnnotation.create(
          task: task,
          task_id: task.task_id,
          annotation_type_id: annotation_type.annotation_type_id,
          annotation_type: annotation_type,
          annotation: {
            task_name: '<%= task_name %>',
            step_name: step.name,
            namespace: '<%= namespace %>',
            completed_at: step.updated_at.iso8601,
            step_results: step.results
          }
        )
      end
    end
    <% end -%>
  end
end
