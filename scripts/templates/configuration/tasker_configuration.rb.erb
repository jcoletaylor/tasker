# frozen_string_literal: true

# Generated by Tasker Demo Application Builder
# Configuration for: <%= @app_name %>
# Generated at: <%= Time.now.strftime("%Y%m%dT%H%M%S%z") %>

Tasker.configure do |config|
  # Authentication Configuration
  config.auth do |auth|
    # Disable authentication for demo purposes
    # In production, enable and configure your authenticator
    auth.authentication_enabled = false
    auth.strategy = :none
    # auth.authenticator_class = 'YourAuthenticatorClass'
    # auth.authorization_enabled = true
    # auth.authorization_coordinator_class = 'YourAuthorizationCoordinator'
    # auth.user_class = 'User'
  end

  # Database Configuration
  config.database do |db|
    # Use default Rails database configuration
    # For secondary database setup, uncomment:
    # db.enable_secondary_database = true
    # db.name = :tasker
  end

  # Telemetry Configuration
  config.telemetry do |telemetry|
    # Enable telemetry for observability
    telemetry.enabled = true
    telemetry.service_name = '<%= @app_name %>'
    telemetry.service_version = '1.0.0'

    # Structured logging
    telemetry.structured_logging_enabled = true
    telemetry.log_level = 'info'
    telemetry.log_format = 'json'

    # Metrics collection
    telemetry.metrics_enabled = <%= options[:observability] %>
    telemetry.metrics_format = 'prometheus'
    telemetry.metrics_endpoint = '/tasker/metrics'
    telemetry.metrics_auth_required = false

    <% if options[:observability] %>
    # Prometheus configuration (all values in seconds for dry-struct compatibility)
    telemetry.prometheus = {
      endpoint: ENV['PROMETHEUS_ENDPOINT'], # nil disables remote write
      username: ENV['PROMETHEUS_USERNAME'],
      password: ENV['PROMETHEUS_PASSWORD'],
      job_timeout: 300,        # 5 minutes in seconds
      export_timeout: 120,     # 2 minutes in seconds
      retry_attempts: 3,
      retention_window: 300,   # 5 minutes in seconds
      safety_margin: 60,       # 1 minute in seconds
      metric_prefix: 'tasker',
      include_instance_labels: true,
      compression: 'snappy',
      batch_size: 1000,
      skip_if_unavailable: true
    }
    <% end %>

    # Performance monitoring
    telemetry.performance_monitoring_enabled = true
    telemetry.slow_query_threshold_seconds = 1.0
    telemetry.memory_threshold_mb = 100
    telemetry.event_sampling_rate = 1.0

    # Reduce noise in demo environment (use symbols for proper array type)
    telemetry.filter_parameters = [:password, :token, :api_key]
    telemetry.filter_mask = '[REDACTED]'
  end

  # Engine Configuration
  config.engine do |engine|
    # Task handler directory
    engine.task_handler_directory = 'app/tasks'
    engine.task_config_directory = 'config/tasks'

    # Identity strategy for task uniqueness
    engine.identity_strategy = :default
    # engine.identity_strategy_class = 'MyApp::CustomIdentityStrategy'

    # Custom events directories (array of strings)
    engine.custom_events_directories = ['config/tasker/events']
  end

  # Health Check Configuration
  config.health do |health|
    # Authentication requirements for health endpoints
    health.status_requires_authentication = false  # Allow unauthenticated access for demo
    health.ready_requires_authentication = false   # K8s compatibility

    # Timeouts and caching (proper types: Float for timeout, Integer for cache)
    health.readiness_timeout_seconds = 5.0
    health.cache_duration_seconds = 15
  end

  # Backoff Configuration
  config.backoff do |backoff|
    # Default backoff progression (array of integers in seconds)
    backoff.default_backoff_seconds = [1, 2, 4, 8, 16, 32]

    # Exponential backoff settings (Integer for max seconds, Float for multiplier)
    backoff.max_backoff_seconds = 300  # 5 minutes maximum
    backoff.backoff_multiplier = 2.0

    # Jitter to prevent thundering herd (Boolean and Float)
    backoff.jitter_enabled = true
    backoff.jitter_max_percentage = 0.1

    # Task reenqueue delays for different states (hash with symbol keys, integer values)
    backoff.reenqueue_delays = {
      has_ready_steps: 0,              # Immediate processing
      waiting_for_dependencies: 45,    # Moderate delay
      processing: 10                   # Short delay
    }

    # Default values (integers)
    backoff.default_reenqueue_delay = 30
    backoff.buffer_seconds = 5
  end
end

# Configure Rails application specific settings
Rails.application.configure do
  # Enable CORS for API access (demo purposes)
  config.middleware.insert_before 0, Rack::Cors do
    allow do
      origins '*'
      resource '*',
        headers: :any,
        methods: [:get, :post, :put, :patch, :delete, :options, :head]
    end
  end if defined?(Rack::Cors)

  # Log level for demo
  config.log_level = :info

  # Disable host authorization for demo
  config.hosts.clear if config.respond_to?(:hosts)
end
