# <%= @app_name.titleize %> - Tasker Demo Application

**Generated by Tasker Demo Application Builder v2.5.0**
*Generated at: <%= Time.now.strftime('%Y-%m-%d %H:%M:%S UTC') %>*

## Overview

This demo application showcases **Tasker's enterprise workflow orchestration capabilities** using real-world business scenarios integrated with the DummyJSON API. It demonstrates:

- **Complex workflow orchestration** with step dependencies
- **External API integration** using Tasker's built-in API handlers
- **Business logic processing** with custom calculation steps
- **Enterprise observability** with Jaeger tracing and Prometheus metrics
- **Production-ready patterns** for Rails integration

## Business Workflows Included

<% @tasks.each do |task_type| %>
### <%= task_type.classify %> Workflow

<%= task_description(task_type) %>

**Workflow Steps:**
<% task_config = load_task_configuration(task_type) %>
<% task_config[:steps].each_with_index do |step, index| %>
<%= index + 1 %>. **<%= step[:name].humanize %>**: <%= step[:description] %>
<% end %>

<% end %>

## Getting Started

### Prerequisites

- Ruby <%= RUBY_VERSION %>
- Rails 7.0+
- PostgreSQL (configured in `database.yml`)
<% if options[:observability] %>
- Docker (for Jaeger and Prometheus)
<% end %>

### Quick Start

1. **Install dependencies:**
   ```bash
   bundle install
   ```

2. **Setup database:**
   ```bash
   rails db:create
   rails db:migrate
   ```

3. **Start the server:**
   ```bash
   rails server
   ```

<% if options[:observability] %>
4. **Start observability stack (optional):**
   ```bash
   # Start Jaeger
   docker run -d --name jaeger \
     -p 16686:16686 \
     -p 14268:14268 \
     jaegertracing/all-in-one:latest

   # Start Prometheus
   docker run -d --name prometheus \
     -p 9090:9090 \
     prom/prometheus:latest
   ```
<% end %>

### API Endpoints

The application provides both GraphQL and REST endpoints for workflow management:

#### GraphQL Endpoint
- **URL**: `http://localhost:3000/tasker/graphql`
- **Playground**: Available in development mode

#### REST API Endpoints
- **Base URL**: `http://localhost:3000/tasker`
- **API Documentation**: `http://localhost:3000/tasker/api-docs` (Swagger UI)

#### Health Check Endpoints
- **Readiness**: `GET /tasker/health/ready`
- **Liveness**: `GET /tasker/health/live`
- **Status**: `GET /tasker/health/status`

#### Metrics Endpoint
- **Prometheus Metrics**: `GET /tasker/metrics`

## Workflow Examples

### Creating Tasks

<% @tasks.each do |task_type| %>
#### <%= task_type.classify %> Workflow

**GraphQL Mutation:**
```graphql
mutation {
  createTask(
    taskName: "<%= load_task_configuration(task_type)[:task_name] %>"
    dependentSystem: "<%= task_type %>"
    context: {
      <% load_task_configuration(task_type)[:required_context_fields].each do |field| %>
      <%= field %>: "sample_value"
      <% end %>
    }
  ) {
    task {
      taskId
      status
      context
    }
  }
}
```

**REST API:**
```bash
curl -X POST http://localhost:3000/tasker/tasks \
  -H "Content-Type: application/json" \
  -d '{
    "task_name": "<%= load_task_configuration(task_type)[:task_name] %>",
    "dependent_system": "<%= task_type %>",
    "context": {
      <% load_task_configuration(task_type)[:required_context_fields].each do |field| %>
      "<%= field %>": "sample_value"<%= ',' unless field == load_task_configuration(task_type)[:required_context_fields].last %>
      <% end %>
    }
  }'
```

<% end %>

### Monitoring Task Execution

**Check Task Status:**
```bash
curl http://localhost:3000/tasker/tasks/{task_id}
```

**View Task Steps:**
```bash
curl http://localhost:3000/tasker/tasks/{task_id}/steps
```

## Architecture

### Workflow Structure

Each workflow is organized with:
- **Task Handler**: Defines the workflow structure and step dependencies
- **Step Handlers**: Individual processing logic for each workflow step
- **API Integration**: Uses Tasker's `StepHandler::Api` for external service calls
- **Business Logic**: Custom calculation and validation steps

### File Organization

```
app/
├── tasks/
<% @tasks.each do |task_type| %>
│   └── <%= task_type %>/
│       ├── <%= load_task_configuration(task_type)[:task_name] %>_task.rb
│       └── step_handlers/
│           <% load_task_configuration(task_type)[:steps].each do |step| %>
│           ├── <%= step[:name] %>_step_handler.rb
│           <% end %>
<% end %>
└── config/
    └── initializers/
        └── tasker.rb
```

### DummyJSON Integration

This demo integrates with [DummyJSON](https://dummyjson.com/), a fake REST API providing:
- **Products**: Product catalog with categories, pricing, and stock
- **Carts**: Shopping cart management
- **Users**: User profiles and authentication simulation
- **Orders**: Order processing simulation

## Observability

<% if options[:observability] %>
### Distributed Tracing (Jaeger)

View distributed traces at: `http://localhost:16686`

- **Service Name**: `<%= @app_name %>`
- **Trace Operations**: Each workflow step creates spans
- **Correlation**: Tasks are correlated by task ID

### Metrics (Prometheus)

Metrics available at: `http://localhost:3000/tasker/metrics`

- **Counter Metrics**: Task completion, step success/failure
- **Histogram Metrics**: Step execution duration
- **Gauge Metrics**: Active task counts

Query metrics at: `http://localhost:9090`

<% else %>
### Basic Telemetry

Structured logging is enabled with correlation IDs for tracking workflow execution across steps.

<% end %>

## Development

### Adding New Workflows

1. **Create Task Handler:**
   ```ruby
   # app/tasks/my_namespace/my_workflow_task.rb
   class MyNamespace::MyWorkflowTask
     include Tasker::TaskHandler
     register_handler('my_workflow', namespace: 'my_namespace')

     define_step_templates do |templates|
       # Define your steps here
     end
   end
   ```

2. **Create Step Handlers:**
   ```ruby
   # app/tasks/my_namespace/step_handlers/my_step_step_handler.rb
   class MyNamespace::StepHandlers::MyStepStepHandler < Tasker::StepHandler::Base
     def process(task, sequence, step)
       # Your processing logic here
     end
   end
   ```

3. **Test Your Workflow:**
   ```bash
   rails console
   > task = Tasker::Task.create!(
       task_name: 'my_workflow',
       dependent_system: 'my_namespace',
       context: { key: 'value' }
     )
   > Tasker::TaskRunnerJob.perform_now(task.task_id)
   ```

### Testing

<% unless options[:skip_tests] %>
Run the test suite:
```bash
bundle exec rspec
```

Test files are organized by workflow in `spec/tasks/`
<% else %>
Test generation was skipped for this demo. To add tests:

1. Add RSpec to your Gemfile
2. Create test files in `spec/tasks/`
3. Use Tasker's testing helpers for workflow validation

<% end %>

## Production Deployment

### Configuration Checklist

- [ ] Enable authentication in `config/initializers/tasker.rb`
- [ ] Configure database connection pooling
- [ ] Set up proper logging levels
- [ ] Configure CORS policies appropriately
- [ ] Set up monitoring and alerting
- [ ] Configure retry and backoff policies
- [ ] Set up database migrations in deployment pipeline

### Environment Variables

<% if options[:observability] %>
```bash
# Observability
JAEGER_ENDPOINT=http://your-jaeger-collector:14268/api/traces
PROMETHEUS_PUSHGATEWAY=http://your-prometheus:9091

<% end %>
# Database
DATABASE_URL=postgresql://user:password@host:port/database

# Rails
RAILS_ENV=production
SECRET_KEY_BASE=your-secret-key
```

## API Documentation

Full API documentation is available at:
- **Swagger UI**: `http://localhost:3000/tasker/api-docs`
- **GraphQL Playground**: `http://localhost:3000/tasker/graphql` (development only)

## Support

This demo application was generated by **Tasker 2.5.0 Demo Application Builder**.

- **Tasker Documentation**: [Visit documentation]
- **GitHub Issues**: [Report issues]
- **API Reference**: Available via Swagger UI

---

**Generated Application Statistics:**
- Workflows: <%= @tasks.length %>
- Total Steps: <%= @tasks.sum { |t| load_task_configuration(t)[:steps].length } %>
- API Integrations: <%= @tasks.sum { |t| load_task_configuration(t)[:steps].count { |s| s[:handler_type] == 'api' } } %>
- Business Logic Steps: <%= @tasks.sum { |t| load_task_configuration(t)[:steps].count { |s| s[:handler_type] == 'calculation' } } %>
- Observability: <%= options[:observability] ? 'Enabled' : 'Disabled' %>
