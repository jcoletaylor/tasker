# Docker Compose for Tasker Application: <%= app_name %>
# Generated by Tasker Demo Application Builder v2.6.1
# Includes core services and optional observability stack

version: '3.8'

services:
  # === CORE APPLICATION ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        # Use current user's ID to avoid permission issues
        # Uncomment and set these to match your host user
        # USER_ID: 1000
        # GROUP_ID: 1000
    ports:
      - "3000:3000"      # Rails server
    volumes:
      - .:/app:cached                    # Source code with live reload
      - bundle_cache:/usr/local/bundle   # Gem cache for faster rebuilds
      - node_modules:/app/node_modules    # Node modules cache
    environment:
      - RAILS_ENV=development
      - DATABASE_URL=postgresql://tasker:tasker@postgres:5432/<%= app_name.underscore %>_development
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_AGENT_HOST=jaeger
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9091
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    stdin_open: true
    tty: true
    networks:
      - tasker_network

  # === DATABASE ===
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: <%= app_name.underscore %>_development
      POSTGRES_USER: tasker
      POSTGRES_PASSWORD: tasker
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/functions:/docker-entrypoint-initdb.d/functions:ro
      - ./db/views:/docker-entrypoint-initdb.d/views:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tasker -d <%= app_name.underscore %>_development"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tasker_network

  # === CACHE/QUEUE ===
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - tasker_network

<% if with_observability %>
  # === OBSERVABILITY STACK ===
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # HTTP API for spans
      - "5775:5775/udp"  # Agent UDP thrift
      - "6831:6831/udp"  # Agent UDP jaeger.thrift
      - "6832:6832/udp"  # Agent UDP jaeger.thrift binary
      - "5778:5778"      # Agent HTTP serve configs
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - tasker_network
    profiles:
      - observability

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"      # Prometheus UI
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - tasker_network
    profiles:
      - observability
<% end %>

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
<% if with_observability %>
  prometheus_data:
    driver: local
<% end %>
  bundle_cache:
    driver: local
  node_modules:
    driver: local

networks:
  tasker_network:
    name: <%= app_name.underscore %>_network
    driver: bridge