# <%= app_name.titleize %> - Tasker Demo Application

Generated by Tasker Demo Application Builder v2.6.0 with Docker development environment.

## üê≥ Docker Development Setup

This application includes a complete Docker-based development environment with:

- **Rails Application** with live code reloading
- **PostgreSQL 15** database with Tasker schema
- **Redis 7** for caching and background jobs
- **Jaeger** distributed tracing (optional)
- **Prometheus** metrics collection (optional)

## üöÄ Quick Start

### Prerequisites

- Docker and Docker Compose installed
- Git (for cloning)

### Start Development Environment

```bash
# Start core services (app, database, redis)
./bin/docker-dev up

# OR start with full observability stack
./bin/docker-dev up-full
```

The application will be available at:
- **App**: http://localhost:3000
- **Tasker API**: http://localhost:3000/tasker
- **Jaeger UI**: http://localhost:16686 (if observability enabled)
- **Prometheus**: http://localhost:9090 (if observability enabled)

## üõ†Ô∏è Development Commands

The `./bin/docker-dev` script provides convenient commands:

### Service Management
```bash
./bin/docker-dev up          # Start core services
./bin/docker-dev up-full     # Start with observability
./bin/docker-dev down        # Stop all services
./bin/docker-dev restart     # Restart app service
./bin/docker-dev status      # Show service status
```

### Development Tools
```bash
./bin/docker-dev console     # Rails console
./bin/docker-dev bash        # Shell access
./bin/docker-dev logs        # View all logs
./bin/docker-dev logs-app    # View app logs only
```

### Database Operations
```bash
./bin/docker-dev migrate     # Run migrations
./bin/docker-dev setup       # Run Tasker setup
./bin/docker-dev reset-db    # Reset database (WARNING: destructive)
```

### Testing & Validation
```bash
./bin/docker-dev test        # Run test suite
./bin/docker-dev validate    # Run Tasker validation scripts
```

### Container Management
```bash
./bin/docker-dev build       # Rebuild app container
./bin/docker-dev clean       # Remove everything (WARNING: destructive)
```

## üìã Generated Workflows

This demo includes the following Tasker workflows:

<% tasks.each do |task| %>
### <%= task.capitalize %> Workflow
- **Namespace**: `<%= namespace %>`
- **Description**: Enterprise <%= task %> workflow with real-world patterns
- **API Integration**: DummyJSON API for realistic data
- **Observability**: Full tracing and metrics integration

<% end %>

## üîç Exploring the Application

### Tasker Dashboard
Visit http://localhost:3000/tasker to explore:
- Task execution monitoring
- Workflow step tracking  
- Health and metrics endpoints
- Handler registry inspection

### API Endpoints
```bash
# Health checks
curl http://localhost:3000/tasker/health/status

# Metrics (Prometheus format)
curl http://localhost:3000/tasker/metrics

# Create a sample task
curl -X POST http://localhost:3000/tasker/graphql \
  -H "Content-Type: application/json" \
  -d '{"query": "mutation { createTask(input: { handlerName: \"<%= tasks.first.classify %>\" }) { task { id status } } }"}'
```

### Validation Scripts
Test the observability integration:
```bash
# Test Jaeger integration (requires up-full)
./bin/docker-dev validate

# Or run individual validations
docker-compose exec app ruby scripts/validate_jaeger_integration.rb
docker-compose exec app ruby scripts/validate_prometheus_integration.rb
```

## üèóÔ∏è Architecture

### Docker Services
- **app**: Rails application with Tasker workflows
- **postgres**: PostgreSQL database with Tasker schema
- **redis**: Cache and background job queue
- **jaeger**: Distributed tracing (profile: observability)
- **prometheus**: Metrics collection (profile: observability)

### Volume Mounts
- Source code mounted for live reload: `.:/app:cached`
- Persistent data: `postgres_data`, `redis_data`
- Build cache: `bundle_cache`, `node_modules`

### Network
All services communicate via `<%= app_name.underscore %>_network` bridge network.

## üìö Next Steps

1. **Explore the Code**: Check out the generated task handlers in `app/tasks/`
2. **Customize Workflows**: Modify YAML configurations in `config/tasker/tasks/`
3. **Add Business Logic**: Implement your domain-specific step handlers
4. **Monitor Execution**: Use Jaeger and Prometheus for observability
5. **Scale Up**: Add more complex workflows and dependencies

## üêõ Troubleshooting

### Common Issues

**Database Connection Issues**:
```bash
./bin/docker-dev down
./bin/docker-dev up
```

**Permission Issues**:
```bash
./bin/docker-dev build
```

**Port Conflicts**:
Check if ports 3000, 5432, 6379, 16686, or 9090 are in use.

**Reset Everything**:
```bash
./bin/docker-dev clean  # WARNING: Destroys all data
./bin/docker-dev up
```

### Logs and Debugging
```bash
# View detailed logs
./bin/docker-dev logs

# Debug specific service
docker-compose logs postgres
docker-compose logs redis
docker-compose logs jaeger
docker-compose logs prometheus

# Execute commands directly
docker-compose exec app rails runner "puts Tasker::Task.count"
```

## üìñ Documentation

- [Tasker Documentation](https://github.com/tasker-systems/tasker)
- [Docker Compose Reference](https://docs.docker.com/compose/)
- [Jaeger Documentation](https://www.jaegertracing.io/docs/)
- [Prometheus Documentation](https://prometheus.io/docs/)

---

**Happy coding with Tasker! üöÄ**