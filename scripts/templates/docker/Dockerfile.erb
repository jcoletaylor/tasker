# Dockerfile for Tasker Application: <%= app_name %>
# Generated by Tasker Demo Application Builder v2.6.0
# Multi-stage build optimized for development and production

FROM ruby:3.4-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    git \
    nodejs \
    npm \
    tzdata \
    curl

WORKDIR /app

# === DEVELOPMENT STAGE ===
FROM base AS development

# Install development tools
RUN apk add --no-cache \
    bash \
    less \
    vim \
    postgresql-client

# Copy and install gems first (for layer caching)
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local deployment false && \
    bundle config set --local path vendor/bundle && \
    bundle install --jobs 4 --retry 3

# Copy package.json for any JS dependencies (if needed)
COPY package*.json ./ 2>/dev/null || true
RUN if [ -f package.json ]; then npm install; fi

# Copy application code
COPY . .

# Create user for security (using build args for flexibility)
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN addgroup -g ${GROUP_ID} -S app && \
    adduser -u ${USER_ID} -S app -G app

# Ensure app user owns the application directory
RUN chown -R app:app /app

USER app

# Expose Rails server port
EXPOSE 3000

# Default command for development
CMD ["bash", "-c", "bundle install && rails db:prepare && rails db:migrate && rails tasker:setup && rails server -b 0.0.0.0"]

# === PRODUCTION STAGE ===
FROM base AS production

# Production-specific optimizations
ENV RAILS_ENV=production
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true

# Install production gems only
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local deployment true && \
    bundle config set --local without development:test && \
    bundle install --jobs 4 --retry 3

# Copy application code
COPY . .

# Precompile assets and bootsnap cache
RUN bundle exec bootsnap precompile --gemfile

# Create user for security (using build args for flexibility)
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN addgroup -g ${GROUP_ID} -S app && \
    adduser -u ${USER_ID} -S app -G app && \
    chown -R app:app /app

USER app

EXPOSE 3000

# Production startup command
CMD ["rails", "server", "-b", "0.0.0.0", "-e", "production"]