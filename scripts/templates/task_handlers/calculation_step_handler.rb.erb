# frozen_string_literal: true

# Generated by Tasker Demo Application Builder
# Task: <%= task_name %>
# Step: <%= step_name %>
# Generated at: <%= Time.now.strftime("%Y%m%dT%H%M%S%z") %>

module <%= namespace.classify %>
  module StepHandlers
    class <%= step_name.classify %>StepHandler < Tasker::StepHandler::Base
      def process(_task, _sequence, step)
        log_structured(
          :info,
          "Processing <%= step_name %> step",
          correlation_id: step.task.task_id,
          step_name: step.name,
          task: "<%= task_name %>"
        )

        # Get input data from previous steps
        input_data = extract_input_data(step)

        # Perform calculation based on step type
        <% case step_type %>
        <% when 'calculation' %>
        result = perform_pricing_calculation(input_data)
        <% when 'analysis' %>
        result = perform_stock_analysis(input_data)
        <% else %>
        result = perform_generic_calculation(input_data)
        <% end %>

        log_structured(
          :info,
          "Successfully processed <%= step_name %> step",
          correlation_id: step.task.task_id,
          result_keys: result.keys,
          processing_duration: step.duration
        )

        result

      rescue StandardError => e
        log_structured(
          :error,
          "Error processing <%= step_name %> step",
          error: e.message,
          backtrace: e.backtrace.first(5),
          correlation_id: step.task.task_id
        )
        raise
      end

      private

      def extract_input_data(step)
        # Extract data from previous step results
        previous_steps = step.task.workflow_steps.where('sequence < ?', step.sequence).completed

        input_data = {}
        previous_steps.each do |prev_step|
          input_data[prev_step.name] = prev_step.results if prev_step.results.present?
        end

        # Also include task context
        input_data['context'] = step.task.context
        input_data
      end

      <% case step_type %>
      <% when 'calculation' %>
      def perform_pricing_calculation(input_data)
        # Extract cart and product data from previous steps
        cart_data = input_data['validate_cart'] || {}
        product_data = input_data['check_inventory'] || {}

        products = cart_data['products'] || []
        base_total = products.sum { |p| p['quantity'] * p['price'] }

        # Apply business logic calculations
        subtotal = base_total
        tax_rate = 0.08  # 8% tax
        tax_amount = subtotal * tax_rate
        shipping_cost = calculate_shipping(subtotal)
        discount_amount = calculate_discount(subtotal, products)

        final_total = subtotal + tax_amount + shipping_cost - discount_amount

        {
          subtotal: subtotal.round(2),
          tax_rate: tax_rate,
          tax_amount: tax_amount.round(2),
          shipping_cost: shipping_cost.round(2),
          discount_amount: discount_amount.round(2),
          final_total: final_total.round(2),
          calculated_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end

      def calculate_shipping(subtotal)
        # Free shipping over $100
        return 0.0 if subtotal >= 100

        # Standard shipping
        subtotal < 50 ? 9.99 : 5.99
      end

      def calculate_discount(subtotal, products)
        # Volume discount: 10% off orders over $200
        return subtotal * 0.10 if subtotal >= 200

        # Category-specific discounts
        beauty_items = products.count { |p| p['category'] == 'beauty' }
        return 5.0 if beauty_items >= 3

        0.0
      end

      <% when 'analysis' %>
      def perform_stock_analysis(input_data)
        # Extract product data from previous step
        products_data = input_data['monitor_stock_levels'] || {}
        products = products_data.is_a?(Array) ? products_data : [products_data]
        threshold = input_data.dig('context', 'threshold') || 10

        # Identify low stock products
        low_stock_products = products.select { |product| product['stock'] <= threshold }

        # Calculate reorder priorities
        priority_products = low_stock_products.sort_by do |product|
          # Priority based on stock level and category importance
          stock_urgency = threshold - product['stock']
          category_weight = category_priority_weight(product['category'])
          stock_urgency * category_weight
        end.reverse

        {
          total_products_analyzed: products.length,
          low_stock_count: low_stock_products.length,
          threshold_used: threshold,
          low_stock_products: low_stock_products.map { |p| format_product_summary(p) },
          priority_reorder_list: priority_products.first(10).map { |p| format_reorder_item(p) },
          analysis_completed_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end

      def category_priority_weight(category)
        case category&.downcase
        when 'groceries', 'home-decoration'
          3.0  # High priority
        when 'beauty', 'fragrances'
          2.0  # Medium priority
        when 'furniture'
          1.0  # Lower priority
        else
          1.5  # Default priority
        end
      end

      def format_product_summary(product)
        {
          id: product['id'],
          title: product['title'],
          stock: product['stock'],
          category: product['category'],
          price: product['price']
        }
      end

      def format_reorder_item(product)
        suggested_quantity = calculate_suggested_reorder_quantity(product)
        {
          product_id: product['id'],
          title: product['title'],
          current_stock: product['stock'],
          suggested_quantity: suggested_quantity,
          estimated_cost: product['price'] * suggested_quantity,
          urgency: stock_urgency_level(product['stock'])
        }
      end

      def calculate_suggested_reorder_quantity(product)
        # Simple EOQ-inspired calculation
        base_quantity = 50  # Base reorder quantity

        # Adjust based on category
        case product['category']&.downcase
        when 'groceries'
          base_quantity * 2  # Higher turnover
        when 'furniture'
          base_quantity / 2  # Lower turnover
        else
          base_quantity
        end
      end

      def stock_urgency_level(stock)
        case stock
        when 0
          'critical'
        when 1..5
          'high'
        when 6..10
          'medium'
        else
          'low'
        end
      end

      <% else %>
      def perform_generic_calculation(input_data)
        # Generic calculation template
        # Customize based on specific business requirements
        {
          processed_data: input_data,
          calculation_type: '<%= step_name %>',
          result: 'processed',
          processed_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end
      <% end %>
    end
  end
end
