# frozen_string_literal: true

# Generated by Tasker Demo Application Builder
# Task: <%= task_name %>
# Step: <%= step_name %>
# Generated at: <%= Time.now.strftime("%Y%m%dT%H%M%S%z") %>

module <%= namespace.classify %>
  module StepHandlers
    class <%= step_name.classify %>StepHandler < Tasker::StepHandler::Api
      # The process method receives the API response from the parent class
      # and focuses on business logic processing
      def process(_task, _sequence, step)
        log_structured(
          :info,
          "Processing <%= step_name %> step",
          correlation_id: step.task.task_id,
          step_name: step.name,
          task: "<%= task_name %>",
          api_endpoint: step.handler_config.url
        )

        # Parent class handles the HTTP request/response cycle
        api_response = super

        # Process the DummyJSON response data
        <%=
        case step_name
        when 'validate_cart'
          'validated_data = validate_cart_data(api_response)'
        when 'check_inventory'
          'product_data = process_product_data(api_response)'
        when 'register_user'
          'user_data = process_user_data(api_response)'
        when 'create_order'
          'order_data = create_order_record(api_response)'
        else
          'processed_data = process_api_response(api_response)'
        end
        %>

        log_structured(
          :info,
          "Successfully processed <%= step_name %> step",
          correlation_id: step.task.task_id,
          processing_duration: step.duration
        )

        # Return processed data
        <%=
        case step_name
        when 'validate_cart'
          'validated_data'
        when 'check_inventory'
          'product_data'
        when 'register_user'
          'user_data'
        when 'create_order'
          'order_data'
        else
          'processed_data'
        end
        %>

      rescue StandardError => e
        log_structured(
          :error,
          "Error processing <%= step_name %> step",
          error: e.message,
          backtrace: e.backtrace.first(5),
          correlation_id: step.task.task_id,
          api_endpoint: step.handler_config.url
        )
        raise
      end

      private

      <% if step_name == 'validate_cart' %>
      def validate_cart_data(cart_data)
        # Validate DummyJSON cart structure
        raise "Invalid cart data" unless cart_data['products']&.any?

        # Calculate totals and validate products
        {
          cart_id: cart_data['id'],
          user_id: cart_data['userId'],
          products: cart_data['products'],
          total_products: cart_data['totalProducts'],
          total_quantity: cart_data['totalQuantity'],
          validated_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end
      <% end %>

      <% if step_name == 'check_inventory' %>
      def process_product_data(product_data)
        # Handle both single product and product list responses
        products = product_data.is_a?(Hash) && product_data['products'] ? product_data['products'] : [product_data]

        processed_products = products.map do |product|
          {
            product_id: product['id'],
            title: product['title'],
            price: product['price'],
            stock: product['stock'],
            category: product['category'],
            availability: product['stock'] > 0 ? 'available' : 'out_of_stock',
            processed_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
          }
        end

        # Return array if multiple products, single object if one product
        products.length == 1 ? processed_products.first : processed_products
      end
      <% end %>

      <% if step_name == 'register_user' %>
      def process_user_data(user_data)
        # Process DummyJSON user information
        {
          user_id: user_data['id'],
          username: user_data['username'],
          email: user_data['email'],
          full_name: "#{user_data['firstName']} #{user_data['lastName']}",
          phone: user_data['phone'],
          processed_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end
      <% end %>

      <% if step_name == 'create_order' %>
      def create_order_record(order_data)
        # Create order record from DummyJSON response (simulated)
        {
          order_id: SecureRandom.random_number(10000),
          user_id: order_data['userId'],
          products: order_data['products'],
          total_amount: calculate_order_total(order_data['products']),
          status: 'pending',
          tracking_number: "TRK#{SecureRandom.hex(8).upcase}",
          created_at: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end

      def calculate_order_total(products)
        products.sum { |product| product['quantity'] * product['price'] }
      end
      <% end %>

      <% if !['validate_cart', 'check_inventory', 'register_user', 'create_order'].include?(step_name) %>
      def process_api_response(response_data)
        # Generic API response processing
        # Customize based on specific DummyJSON endpoint requirements
        {
          data: response_data,
          processed_at: Time.now.strftime("%Y%m%dT%H%M%S%z"),
          step_name: "<%= step_name %>"
        }
      end
      <% end %>
    end
  end
end
