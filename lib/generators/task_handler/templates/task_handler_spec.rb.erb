# frozen_string_literal: true

require 'rails_helper'
require_relative '../../app/<%= @task_handler_directory %>/<%= @task_name %>'

RSpec.describe <%= @module_namespace %>::<%= @class_name %> do
  let(:yaml_path) { described_class.yaml_path }
  let(:yaml_config) { YAML.load_file(yaml_path) }
  let(:handler_class) { described_class }
  let(:handler_instance) { described_class.new }

  describe '#initialize' do
    it 'loads the task configuration from YAML' do
      expect(handler_instance.config).to be_a(Hash)
      expect(handler_instance.config['name']).to eq('<%= @task_name %>')
    end

    it 'validates the configuration' do
      expect(handler_instance.config).to include('step_templates')
      expect(handler_instance.config).to include('schema')
    end

    it 'builds the handler class automatically' do
      expect(handler_class.included_modules).to include(Tasker::TaskHandler)
      expect(handler_class::NAMED_STEPS).to eq(yaml_config['named_steps'])
      expect(handler_class::DEFAULT_DEPENDENT_SYSTEM).to eq('<%= @dependent_system %>')
    end
  end

  describe '.from_yaml' do
    it 'loads the configuration from the specified YAML file' do
      config = Tasker::TaskBuilder.from_yaml(yaml_path).config
      expect(config).to include('name' => '<%= @task_name %>')
      expect(config).to include('module_namespace' => '<%= @module_namespace %>')
      expect(config).to include('class_name' => '<%= @class_name %>')
    end
  end

  describe '#build' do
    let(:instance) { described_class.new }

    it 'builds and registers the handler class' do
      handler_class = instance.build
      expect(handler_class).to eq(described_class)
      expect(handler_class.included_modules).to include(Tasker::TaskHandler)
    end

    it 'defines named step constants' do
      expect(described_class::NAMED_STEPS).to eq(yaml_config['named_steps'])
    end

    it 'defines default dependent system constant' do
      expect(described_class::DEFAULT_DEPENDENT_SYSTEM).to eq('<%= @dependent_system %>')
    end

    it 'defines step templates with correct structure' do
      # Check that step templates are defined
      expect(handler_instance.config['step_templates'].count).to eq(3)

      # Check specific step template details
      fetch_step = handler_instance.config['step_templates'].find { |s| s['name'] == 'fetch_data' }
      expect(fetch_step).to be_present
      expect(fetch_step['handler_class']).to eq('<%= @module_namespace %>::StepHandler::FetchDataStepHandler')

      # Check dependencies
      process_step = handler_instance.config['step_templates'].find { |s| s['name'] == 'process_data' }
      expect(process_step['depends_on_steps']).to include('fetch_data')

      complete_step = handler_instance.config['step_templates'].find { |s| s['name'] == 'complete_task' }
      expect(complete_step['depends_on_step']).to eq('process_data')
    end

    it 'defines schema method' do
      task = described_class.new
      expect(task).to respond_to(:schema)
      expect(task.schema).to include('type' => 'object')
      expect(task.schema['required']).to include('input_id')
    end
  end
end
