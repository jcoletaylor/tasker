# frozen_string_literal: true

# Authorization coordinator for <%= @coordinator_class_name %>
#
# This coordinator provides authorization logic for Tasker resources.
# Customize the authorization methods below to implement your business logic.
#
# For more advanced examples, see:
# - docs/AUTH.md (Authorization System section)
# - spec/examples/custom_authorization_coordinator.rb
# - spec/lib/tasker/authorization/ (test examples)
#
class <%= @coordinator_class_name %> < Tasker::Authorization::BaseCoordinator
  protected

  # Implement your authorization logic here
  #
  # @param resource [String] The resource being accessed (e.g., 'tasker.task')
  # @param action [Symbol] The action being performed (e.g., :show, :create)
  # @param context [Hash] Additional context (controller, params, user, etc.)
  # @return [Boolean] true if authorized, false otherwise
  def authorized?(resource, action, context = {})
    # Return false if no user or user doesn't have permission methods
    return false unless user&.respond_to?(:has_tasker_permission?)

    case resource
    when Tasker::Authorization::ResourceConstants::RESOURCES::TASK
      authorize_task(action, context)
    when Tasker::Authorization::ResourceConstants::RESOURCES::WORKFLOW_STEP
      authorize_workflow_step(action, context)
    when Tasker::Authorization::ResourceConstants::RESOURCES::TASK_DIAGRAM
      authorize_task_diagram(action, context)
    when Tasker::Authorization::ResourceConstants::RESOURCES::SYSTEM_STATUS
      authorize_system_status(action, context)
    else
      # Deny access to unknown resources
      false
    end
  end

  private

  # Authorize task operations
  def authorize_task(action, context)
    case action
    when :index, :show
      # TODO: Implement your read permission logic
      user.has_tasker_permission?("tasker.task:#{action}")
    when :create, :update, :destroy, :retry, :cancel
      # TODO: Implement your write permission logic
      # Example: Admin users or users with specific permissions
      user.tasker_admin? || user.has_tasker_permission?("tasker.task:#{action}")
    else
      false
    end
  end

  # Authorize workflow step operations
  def authorize_workflow_step(action, context)
    case action
    when :index, :show
      # TODO: Implement your step read logic
      user.has_tasker_permission?("tasker.workflow_step:#{action}")
    when :update, :destroy, :retry, :cancel
      # TODO: Implement your step write logic
      # Example: Only admins can modify steps
      user.tasker_admin?
    else
      false
    end
  end

  # Authorize task diagram operations
  def authorize_task_diagram(action, context)
    case action
    when :index, :show
      # TODO: Implement your diagram access logic
      user.has_tasker_permission?("tasker.task_diagram:#{action}")
    else
      false
    end
  end

  # Authorize system status operations
  def authorize_system_status(action, context)
    case action
    when :read
      # TODO: Implement your system status access logic
      # Example: Admin users or users with explicit permission
      user.tasker_admin? || user.has_tasker_permission?("tasker.system_status:#{action}")
    else
      false
    end
  end
end
