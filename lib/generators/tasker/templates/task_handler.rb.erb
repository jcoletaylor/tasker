# frozen_string_literal: true

<% if @module_namespace %>
module <%= @module_namespace %>
<% end %>
  class <%= @task_handler_class %> < Tasker::ConfiguredTask
    # Generated with TaskNamespace + Versioning support
    # Namespace: <%= @namespace_name || 'default' %>
    # Version: <%= @version || '0.1.0' %>
    #
    # Add your task handler logic here, if necessary
    # For configured tasks you can override:
    # self.task_name method
    # self.yaml_path method
    # self.config method
    class FetchDataStepHandler < Tasker::StepHandler::Api
      def process(task, _sequence, _step)
        input_id = task.context["input_id"]
        connection.get("/data/#{input_id}")
      end

      def process_results(step, response, initial_results)
        # Extract the response ID from the API response
        data = JSON.parse(response.body)
        step.results = { response_id: data.deep_symbolize_keys.dig(:data, :id) }
      end
    end

    class ProcessDataStepHandler < Tasker::StepHandler::Base
      def process(_task, sequence, _step)
        previous_step = sequence.find_step_by_name("fetch_data")
        response_id = previous_step.results.deep_symbolize_keys.dig(:response_id)

        processed_data = {
          processed: true,
          original_data_id: response_id,
          timestamp: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }

        { processed_data: processed_data }
      end
    end

    class CompleteTaskStepHandler < Tasker::StepHandler::Base
      def process(_task, sequence, _step)
        previous_step = sequence.find_step_by_name("process_data")
        processed_data = previous_step.results.deep_symbolize_keys.dig(:processed_data)

        # Implement your task completion logic here
        {
          task_completed: true,
          data_id: processed_data[:original_data_id],
          completion_timestamp: Time.now.strftime("%Y%m%dT%H%M%S%z")
        }
      end
    end
  end
<% if @module_namespace %>
end
<% end %>
