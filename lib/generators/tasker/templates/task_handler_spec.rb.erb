# frozen_string_literal: true

require 'rails_helper'

RSpec.describe <%= @module_namespace ? "#{@module_namespace}::" : '' %><%= @task_handler_class %> do
  let(:stubs) { Faraday::Adapter::Test::Stubs.new }
  let(:connection) { Faraday.new { |b| b.adapter(:test, stubs) } }
  let(:task_handler) { create_api_task_handler_with_connection(described_class, connection) }
  let(:yaml_path) { described_class.yaml_path }
  let(:yaml_config) { described_class.config }
  let(:handler_class) { described_class }
  let(:input_id) { 1 }
  let(:task_request) do
    Tasker::Types::TaskRequest.new(
      name: "<%= @task_name %>",
      namespace: "<%= @namespace_name || 'default' %>",
      version: "<%= @version || '0.1.0' %>",
      context: { "input_id" => input_id },
      initiator: "user",
      reason: "test",
      source_system: "test_system"
    )
  end
  let(:task) { task_handler.initialize_task!(task_request) }
  let(:factory) { Tasker::HandlerFactory.instance }

  before do
    # Register handler with namespace + version support
    factory.register(
      "<%= @task_name %>",
      described_class,
      namespace_name: "<%= @namespace_name || 'default' %>",
      version: "<%= @version || '0.1.0' %>",
      replace: true
    )
    # Stub data endpoint
    stubs.get("/data/#{input_id}") do |_env|
      [
        200,
        { 'Content-Type' => 'application/json' },
        { data: { id: input_id } }.to_json
      ]
    end
    # Stub data endpoint
    stubs.get("/data") do |_env|
      [
        200,
        { 'Content-Type' => 'application/json' },
        { data: [ { id: input_id } ] }.to_json
      ]
    end
  end

  describe '#initialize' do
    it 'loads the task configuration from YAML' do
      expect(task_handler.config).to be_a(Hash)
      expect(task_handler.config['name']).to eq('<%= @task_name %>')
      expect(task_handler.config['namespace_name']).to eq('<%= @namespace_name || 'default' %>')
      expect(task_handler.config['version']).to eq('<%= @version || '0.1.0' %>')
    end

    it 'validates the configuration' do
      expect(task_handler.config).to include('step_templates')
      expect(task_handler.config).to include('schema')
    end

    it 'builds the handler class automatically' do
      expect(handler_class.included_modules).to include(Tasker::TaskHandler)
      expect(handler_class::NAMED_STEPS).to eq(yaml_config['named_steps'])
      expect(handler_class::DEFAULT_DEPENDENT_SYSTEM).to eq('default_system')
    end
  end

  describe '.from_yaml' do
    it 'loads the configuration from the specified YAML file' do
      config = Tasker::TaskBuilder.from_yaml(yaml_path).config
      expect(config).to include('name' => '<%= @task_name %>')
      expect(config).to include('task_handler_class' => '<%= @module_namespace ? "#{@module_namespace}::" : '' %><%= @task_handler_class %>')
    end
  end

  describe '#build' do
    let(:instance) { described_class.new }

    it 'builds and registers the handler class' do
      handler_class = instance.build
      expect(handler_class).to eq(described_class)
      expect(handler_class.included_modules).to include(Tasker::TaskHandler)
    end

    it 'defines named step constants' do
      expect(described_class::NAMED_STEPS).to eq(yaml_config['named_steps'])
    end

    it 'defines default dependent system constant' do
      expect(described_class::DEFAULT_DEPENDENT_SYSTEM).to eq('default_system')
    end

    it 'defines step templates with correct structure' do
      # Check that step templates are defined
      expect(task_handler.config['step_templates'].count).to eq(3)

      # Check specific step template details
      fetch_step = task_handler.config['step_templates'].find { |s| s['name'] == 'fetch_data' }
      expect(fetch_step).to be_present
      expect(fetch_step['handler_class']).to eq('<%= @module_namespace ? "#{@module_namespace}::" : '' %><%= @task_handler_class %>::FetchDataStepHandler')

      # Check dependencies
      process_step = task_handler.config['step_templates'].find { |s| s['name'] == 'process_data' }
      expect(process_step['depends_on_steps']).to include('fetch_data')

      complete_step = task_handler.config['step_templates'].find { |s| s['name'] == 'complete_task' }
      expect(complete_step['depends_on_step']).to eq('process_data')
    end

    it 'defines schema method' do
      task = described_class.new
      expect(task).to respond_to(:schema)
      expect(task.schema).to include('type' => 'object')
      expect(task.schema['required']).to include('input_id')
    end
  end

  describe 'complete workflow' do
    it 'can handle the task' do
      expect(task).to be_valid
      expect(task.save).to be_truthy
      sequence = task_handler.get_sequence(task)
      expect(sequence.steps.count).to eq(3)

      expect(task.workflow_steps.count).to eq(3)
      expect(task.workflow_steps.map(&:name)).to contain_exactly(
        "fetch_data",
        "process_data",
        "complete_task"
      )

      task_handler.handle(task)
      task.reload
      # Verify all steps are complete
      task.workflow_steps.each do |step|
        expect(step.status).to eq(Tasker::Constants::WorkflowStepStatuses::COMPLETE)
      end
      expect(task.status).to eq(Tasker::Constants::TaskStatuses::COMPLETE)
    end
  end
end

# Create task handler with connection stubbing (for API integration tests)
def create_api_task_handler_with_connection(handler_class, connection)
  handler = handler_class.new

  # Override get_step_handler to inject the mocked connection
  original_get_step_handler = handler.method(:get_step_handler)
  handler.define_singleton_method(:get_step_handler) do |step|
    step_handler = original_get_step_handler.call(step)

    # For API step handlers, override the connection that was built during initialization
    step_handler.instance_variable_set(:@connection, connection) if step_handler.is_a?(Tasker::StepHandler::Api)

    step_handler
  end

  handler
end
