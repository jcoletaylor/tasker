# frozen_string_literal: true

# OmniAuth authenticator for <%= class_name %>
# Generated by: rails generate tasker:authenticator <%= file_name %> --type=omniauth
#
# This authenticator integrates with OmniAuth for OAuth/OpenID authentication.
# Supports multiple authentication providers and session-based authentication.
#
# Configuration example:
#   Tasker::Configuration.configuration do |config|
#     config.auth do |auth|
#       auth.strategy = :custom
#       auth.options = {
#         authenticator_class: '<%= class_name %>Authenticator',
#         user_finder_method: :find_by_provider_uid,
#         user_class: '<%= user_model_class %>',
#         failure_path: '/auth/failure'
#       }
#     end
#   end

class <%= class_name %>Authenticator
  include Tasker::Authentication::Interface

  def initialize(options = {})
    @user_finder_method = options[:user_finder_method] || :find_by_provider_uid
    @user_class = options[:user_class] || '<%= user_model_class %>'
    @failure_path = options[:failure_path] || '/auth/failure'
    @options = options
  end

  # Required: Authenticate the request, raise exception if fails
  def authenticate!(controller)
    unless authenticated?(controller)
      # For HTML requests, redirect to auth provider
      if controller.request.format.html?
        controller.redirect_to(@failure_path)
        return
      else
        # For API requests, raise authentication error
        raise Tasker::Authentication::AuthenticationError,
              'Authentication required. Please authenticate via OAuth provider.'
      end
    end
    true
  end

  # Required: Get the current authenticated user
  def current_user(controller)
    return @current_user if defined?(@current_user)

    @current_user = begin
      # Try session-based user lookup first
      if controller.session[:user_id]
        find_user_by_id(controller.session[:user_id])
      elsif controller.session[:omniauth_auth]
        # If we have fresh OmniAuth data, use it
        auth_data = controller.session[:omniauth_auth]
        find_user_by_provider_data(auth_data)
      else
        nil
      end
    rescue StandardError => e
      Rails.logger.debug "OmniAuth authentication failed: #{e.message}"
      nil
    end
  end

  # Optional: Check if user is authenticated
  def authenticated?(controller)
    current_user(controller).present?
  end

  # Optional: Configuration validation
  def validate_configuration(options = {})
    errors = []

    # Check if OmniAuth is available
    unless defined?(OmniAuth)
      errors << 'OmniAuth gem is required for OmniauthAuthenticator'
    end

    # Validate user class
    user_class = options[:user_class] || '<%= user_model_class %>'
    begin
      model = user_class.constantize

      # Check if user finder method exists
      finder_method = options[:user_finder_method] || :find_by_provider_uid
      unless model.respond_to?(finder_method)
        errors << "User model '#{user_class}' does not have '#{finder_method}' method"
      end
    rescue NameError
      errors << "User class '#{user_class}' not found"
    end

    # Validate failure path
    failure_path = options[:failure_path]
    if failure_path.present? && !failure_path.is_a?(String)
      errors << 'Failure path must be a string'
    end

    errors
  end

  private

  attr_reader :user_finder_method, :user_class, :failure_path, :options

  def find_user_by_id(user_id)
    return nil unless user_id

    user_model = @user_class.constantize
    user_model.find_by(id: user_id)
  rescue ActiveRecord::RecordNotFound, NoMethodError
    nil
  end

  def find_user_by_provider_data(auth_data)
    return nil unless auth_data

    provider = auth_data['provider']
    uid = auth_data['uid']
    return nil unless provider && uid

    user_model = @user_class.constantize
    user_model.send(@user_finder_method, provider, uid)
  rescue StandardError
    nil
  end

  def user_model
    @user_model ||= @user_class.constantize
  end
end
