name: user_registration
namespace_name: blog_examples
task_handler_class: BlogExamples::Post03::UserRegistrationHandler
version: "1.0.0"
description: "Orchestrated user registration workflow across multiple microservices"
default_dependent_system: "user_management_system"

# Input validation schema
schema:
  type: object
  required: ['user_info']
  properties:
    user_info:
      type: object
      required: ['email', 'name']
      properties:
        email:
          type: string
          format: email
        name:
          type: string
          minLength: 1
        phone:
          type: string
        plan:
          type: string
          enum: ['free', 'pro', 'enterprise']
          default: 'free'
        referral_code:
          type: string
        company:
          type: string
        source:
          type: string
          enum: ['web', 'mobile', 'api']
          default: 'web'
    billing_info:
      type: object
      properties:
        payment_method:
          type: string
        billing_address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
    preferences:
      type: object
      properties:
        marketing_emails:
          type: boolean
          default: false
        product_updates:
          type: boolean
          default: false
        newsletter:
          type: boolean
          default: false
    correlation_id:
      type: string
      description: "For distributed tracing"

# Step templates for service orchestration
step_templates:
  - name: create_user_account
    description: "Create user account in UserService"
    handler_class: "BlogExamples::Post03::StepHandlers::CreateUserAccountHandler"
    default_retryable: true
    default_retry_limit: 3
    handler_config:
      url: 'https://api.userservice.com'

  - name: setup_billing_profile
    description: "Create billing profile in BillingService"
    handler_class: "BlogExamples::Post03::StepHandlers::SetupBillingProfileHandler"
    depends_on_steps: ["create_user_account"]
    default_retryable: true
    default_retry_limit: 3
    handler_config:
      url: 'https://api.billingservice.com'

  - name: initialize_preferences
    description: "Set up user preferences in PreferencesService"
    handler_class: "BlogExamples::Post03::StepHandlers::InitializePreferencesHandler"
    depends_on_steps: ["create_user_account"]  # Can run parallel to billing
    default_retryable: true
    default_retry_limit: 3
    handler_config:
      url: 'https://api.preferencesservice.com'

  - name: send_welcome_sequence
    description: "Send welcome email via NotificationService"
    handler_class: "BlogExamples::Post03::StepHandlers::SendWelcomeSequenceHandler"
    depends_on_steps: ["setup_billing_profile", "initialize_preferences"]
    default_retryable: true
    default_retry_limit: 5  # Email services are often flaky
    handler_config:
      url: 'https://api.notificationservice.com'

  - name: update_user_status
    description: "Mark user registration as complete in UserService"
    handler_class: "BlogExamples::Post03::StepHandlers::UpdateUserStatusHandler"
    depends_on_steps: ["send_welcome_sequence"]
    default_retryable: true
    default_retry_limit: 2
    handler_config:
      url: 'https://api.userservice.com'

# Custom events for service monitoring (using Tasker's native circuit breaker)
custom_events:
  - name: "service_call_started"
    description: "Fired when calling external service"
  - name: "service_call_completed"
    description: "Fired when service call succeeds"
  - name: "service_call_failed"
    description: "Fired when service call fails"
