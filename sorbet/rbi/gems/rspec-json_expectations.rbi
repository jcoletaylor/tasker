# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-json_expectations/all/rspec-json_expectations.rbi
#
# rspec-json_expectations-2.2.0

module RSpec
end
module RSpec::JsonExpectations
end
class RSpec::JsonExpectations::MatcherFactory
  def define_matcher(&block); end
  def initialize(matcher_name); end
end
module RSpec::Matchers
  def include_json(*expected, &block_arg); end
  def include_unordered_json(*expected, &block_arg); end
  def match_unordered_json(*expected, &block_arg); end
end
module RSpec::JsonExpectations::Matchers
  def UnorderedArray(*array); end
end
class RSpec::JsonExpectations::Matchers::UnorderedArrayMatcher
  def all?(&blk); end
  def array; end
  def check_for_missing(missing, item, index, ok); end
  def initialize(array); end
  def match(errors, actual, prefix); end
  def match_one(missing, item, index, actual); end
  def size(*args, &block); end
  def unwrap_array; end
  extend Forwardable
end
class RSpec::JsonExpectations::JsonTraverser
  def self.conditionally_negate(value, negate = nil); end
  def self.fetch(actual, key, default = nil); end
  def self.handle_array(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handle_hash(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handle_keyvalue(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handle_regex(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handle_rspec_matcher(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handle_unordered(errors, expected, actual, negate = nil, prefix = nil, options = nil); end
  def self.handle_unsupported(expected); end
  def self.handle_value(errors, expected, actual, negate = nil, prefix = nil); end
  def self.handled_by_simple_value?(expected); end
  def self.has_key?(actual, key); end
  def self.match_size_of_collection(errors, expected, actual, prefix, options); end
  def self.traverse(errors, expected, actual, negate = nil, prefix = nil, options = nil); end
end
class RSpec::JsonExpectations::FailurePresenter
  def self.error_is_missing?(error); end
  def self.error_is_not_eq?(error); end
  def self.error_is_not_match?(error); end
  def self.error_is_size_mismatch?(error); end
  def self.render(errors); end
  def self.render_error(path, error, negate = nil); end
  def self.render_missing(path, error, negate = nil); end
  def self.render_no_key(path, error, negate = nil); end
  def self.render_not_eq(path, error, negate = nil); end
  def self.render_not_match(path, error, negate = nil); end
  def self.render_size_mismatch(path, error, negate = nil); end
end
